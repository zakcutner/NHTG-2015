{
  "name": "nodemw",
  "version": "0.4.2",
  "author": {
    "name": "macbre",
    "email": "maciej.brencz@gmail.com",
    "url": "http://macbre.net"
  },
  "description": "MediaWiki API client written in node.js",
  "main": "./lib/bot",
  "repository": {
    "type": "git",
    "url": "git://github.com/macbre/nodemw.git"
  },
  "keywords": [
    "mediawiki",
    "wiki",
    "api",
    "nodejs"
  ],
  "license": "BSD",
  "engines": {
    "node": ">=0.6"
  },
  "dependencies": {
    "async": "0.9.x",
    "request": "2.45.x",
    "winston": "0.8.x"
  },
  "devDependencies": {
    "csv-string": "2.2.x",
    "jshint": "2.5.x",
    "vows": "0.7.x"
  },
  "scripts": {
    "test": "vows --spec",
    "lint": "jshint lib/api.js lib/bot.js examples/ test/"
  },
  "jshintConfig": {
    "node": true,
    "-W030": false,
    "-W084": false,
    "strict": true
  },
  "readme": "nodemw\n======\n\n[MediaWiki API](http://www.mediawiki.org/wiki/API:Main_page) client written in node.js\n\n[![NPM version](https://badge.fury.io/js/nodemw.png)](http://badge.fury.io/js/nodemw)\n[![Build Status](https://secure.travis-ci.org/macbre/nodemw.png)](http://travis-ci.org/macbre/nodemw)\n\n[![Download stats](https://nodei.co/npm/nodemw.png?downloads=true&downloadRank=true)](https://nodei.co/npm/nodemw/)\n\n## Requirements\n\n* node.js\n\n## Installation\n\n### Using npm\n\n``` bash\nnpm install nodemw\n```\n\nOr [Download the latest stable version](https://github.com/macbre/nodemw/releases) via GitHub.\n\n### Development version\n\n``` bash\ngit clone https://github.com/macbre/nodemw.git\n```\n\n## Features\n\n* HTTP requests are stored in the queue and performed in parallel with limited number of \"threads\" (i.e. there's no risk of flooding the server)\n* articles creation / edit / move / delete\n* file uploads (using given content or via provided URL)\n* Special:Log processing\n* listing articles in categories\n* and much more\n\n## Where it's used\n\n* Over 10k edits on [Poznań Wiki](http://poznan.wikia.com) as [Pyrabot](http://poznan.wikia.com/wiki/Specjalna:Wkład/Pyrabot) - [scripts repository](https://github.com/macbre/pyrabot)\n\n## First script\n\nAn example script can be found in `/examples` directory.\n\n``` bash\ncd examples\nnode pagesInCategory.js\n```\n\n## Running unit tests\n\n```bash\nnpm test\n```\n\n## How to use it?\n\n### Creating a bot instance\n\n``` js\n  var bot = require('nodemw');\n\n  // pass configuration object\n  var client = new bot({\n    server: 'en.wikipedia.org',  // host name of MediaWiki-powered site\n    path: '/w',                  // path to api.php script\n    debug: false                 // is more verbose when set to true\n  });\n\n  client.getArticle('foo', function(err, data) {\n    // error handling\n    if (err) {\n      console.error(err);\n      return;\n    }\n\n    // ...\n  });\n```\n\n#### Config file\n\nnodemw can use config files as well as objects directly provided to ``bot`` object constructor.\n\n``` js\n // read config from external file\n var client = new bot('config.js');\n```\n\nConfig file is a JSON-encoded object with the following fields (see ``/examples/config-DIST.js`` file):\n\n``` js\n{\n      \"server\": \"en.wikipedia.org\",  // host name of MediaWiki-powered site\n      \"path\": \"/w\",                  // path to api.php script\n      \"debug\": false,                // is more verbose when set to true\n      \"username\": \"foo\",             // account to be used when logIn is called (optional)\n      \"password\": \"bar\",             // password to be used when logIn is called (optional)\n      \"userAgent\": \"Custom UA\",      // define custom bot's user agent\n      \"concurrency\": 5               // how many API requests can be run in parallel (defaults to 3)\n}\n```\n## Making direct API calls\n\nnodemw allows you make direct calls to MediaWiki API ([example querying Semantic MediaWiki API](https://github.com/macbre/nodemw/blob/master/examples/smw.js)):\n\n``` js\nvar bot = require('nodemw'),\n  client = new bot({\n\t\tserver: 'semantic-mediawiki.org',\n\t\tpath: '/w'\n\t}),\n\tparams = {\n\t\taction: 'ask',\n\t\tquery: '[[Modification date::+]]|?Modification date|sort=Modification date|order=desc'\n\t};\n\nclient.api.call(params /* api.php parameters */, function(err /* Error instance or null */, info /* processed query result */, next /* more results? */, data /* raw data */) {\n\tconsole.log(data && data.query && data.query.results);\n});\n```\n\n## Bot methods\n\nThe last parameter of each function in nodemw API is a callback which will be fired when the requested action is done.\n\n**Callbacks use node.js style** - ``err`` is always passed as the first argument.\n\n### bot.logIn(username, password, callback)\n\nLog-in using given credentials - [read more](http://www.mediawiki.org/wiki/API:Login)\n\n### bot.getCategories(prefix, callback)\n\nGets the list of all categories on a wiki\n\n### bot.getPagesInCategory(category, callback)\n\nGets the list of pages in a given category - [read more](http://www.mediawiki.org/wiki/API:Properties#revisions_.2F_rv)\n\n### bot.getPagesByPrefix(prefix, callback)\n\nGets the list of pages by a given prefix - [read more](https://www.mediawiki.org/wiki/API:Allpages)\n\n### bot.getArticle(title, callback)\n\nGets article content and its meta data - [read more](http://www.mediawiki.org/wiki/API:Properties#revisions_.2F_rv)\n\n### bot.edit(title, content, summary, callback)\n\nCreates / edits an article - [read more](http://www.mediawiki.org/wiki/API:Edit)\n\n### bot.delete(title, reason, callback)\n\nDeletes an article - [read more](http://www.mediawiki.org/wiki/API:Delete)\n\n### bot.token(title, action, callback)\n\nReturns token required for a number of MediaWiki API operations\n\n### bot.whoami(callback)\n\nGets information about current bot's user (including rights and rate limits) - [read more](http://www.mediawiki.org/wiki/API:Meta#userinfo_.2F_ui)\n\n### bot.move(from, to, summary, callback)\n\nMoves (aka renames) given article - [read more](http://www.mediawiki.org/wiki/API:Move)\n\n### bot.getImages(callback)\n\nGets list of all images on a wiki\n\n### bot.getImageUsage(filename, callback)\n\nGets list of all articles using given image\n\n### bot.getImagesFromArticle(title, callback)\n\nGet list of all images that are used on a given page - [read more](http://www.mediawiki.org/wiki/API:Properties#images_.2F_im)\n\n### bot.getImageInfo(filename, callback)\n\nGets metadata (including uploader, size, dimensions and EXIF data) of given image\n\n### bot.getLog(type, start, callback)\n\nGet entries form Special:Log - [read more](http://www.mediawiki.org/wiki/API:Logevents)\n\n### bot.expandTemplates(content, title, callback)\n\nReturns XML with preprocessed wikitext - [read more](https://www.mediawiki.org/wiki/API:Parsing_wikitext#expandtemplates)\n\n### bot.fetchUrl(url, callback)\n\nMakes a GET request to provided resource and returns its content.\n\n### bot.getRecentChanges(start, callback)\n\nReturns entries from recent changes (starting from a given point)\n\n### bot.getRecentChanges(start, callback)\n\nReturns entries from recent changes (starting from a given point)\n\n### client.getQueryPage(queryPage, callback)\n\nReturns entries from [QueryPage-based special pages](http://www.mediawiki.org/wiki/API:Querypage)\n\n### bot.upload(filename, content, summary _/* or extraParams */_, callback)\n\nUploads a given raw content as a File:[filename] - [read more](http://www.mediawiki.org/wiki/API:Upload)\n\n### bot.uploadByUrl(filename, url, summary _/* or extraParams */_, callback)\n\nUploads a given external resource as a File:[filename]\n\n### bot.getTemplateParamFromXml(tmplXml, paramName)\n\nGets a value of a given template parameter from article's preparsed content (see expandTemplates)\n\n### bot.getExternalLinks(title, callback)\n\nGets all external links used in article\n\n### bot.getBacklinks(title, callback)\n\nGets all articles that links to given article\n\n### bot.search(query, callback)\n\nPerforms a search\n\n## Helpers\n\n### bot.getConfig(key, def)\n\nGets config entry value (returns ``def`` value if not found)\n\n### bot.setConfig(key, val)\n\nSets config entry value\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/macbre/nodemw/issues"
  },
  "homepage": "https://github.com/macbre/nodemw",
  "_id": "nodemw@0.4.2",
  "_from": "nodemw@"
}
